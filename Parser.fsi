// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | EQEQ
  | BANGEQ
  | LT
  | LE
  | GT
  | GE
  | ANDAND
  | OROR
  | LPAR
  | RPAR
  | COMMA
  | EQ
  | SEMICOLON
  | ELSE
  | FALSE
  | FUNC
  | IF
  | IN
  | LET
  | READ
  | THEN
  | TRUE
  | WRITE
  | NAME of (string)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EQEQ
    | TOKEN_BANGEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDAND
    | TOKEN_OROR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_SEMICOLON
    | TOKEN_ELSE
    | TOKEN_FALSE
    | TOKEN_FUNC
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_READ
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_WRITE
    | TOKEN_NAME
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_program
    | NONTERM_definition
    | NONTERM_definitions
    | NONTERM_expression
    | NONTERM_expression_list
    | NONTERM_expressions
    | NONTERM_name_list
    | NONTERM_names
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Syntax.prog) 
